// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.3
// source: rpc/worker/worker.proto

package worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Worker_AssignMap_FullMethodName           = "/Worker/AssignMap"
	Worker_AssignReduce_FullMethodName        = "/Worker/AssignReduce"
	Worker_HealthCheck_FullMethodName         = "/Worker/HealthCheck"
	Worker_GetStatus_FullMethodName           = "/Worker/GetStatus"
	Worker_GetIntermediateData_FullMethodName = "/Worker/GetIntermediateData"
)

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	AssignMap(ctx context.Context, in *MapTask, opts ...grpc.CallOption) (*WorkerAck, error)
	AssignReduce(ctx context.Context, in *ReduceTask, opts ...grpc.CallOption) (*WorkerAck, error)
	HealthCheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*WorkerAck, error)
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetIntermediateData(ctx context.Context, in *InterMediateDataRequest, opts ...grpc.CallOption) (*InterMediateDataResponse, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) AssignMap(ctx context.Context, in *MapTask, opts ...grpc.CallOption) (*WorkerAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerAck)
	err := c.cc.Invoke(ctx, Worker_AssignMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) AssignReduce(ctx context.Context, in *ReduceTask, opts ...grpc.CallOption) (*WorkerAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerAck)
	err := c.cc.Invoke(ctx, Worker_AssignReduce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) HealthCheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*WorkerAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerAck)
	err := c.cc.Invoke(ctx, Worker_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Worker_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetIntermediateData(ctx context.Context, in *InterMediateDataRequest, opts ...grpc.CallOption) (*InterMediateDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterMediateDataResponse)
	err := c.cc.Invoke(ctx, Worker_GetIntermediateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	AssignMap(context.Context, *MapTask) (*WorkerAck, error)
	AssignReduce(context.Context, *ReduceTask) (*WorkerAck, error)
	HealthCheck(context.Context, *HealthcheckRequest) (*WorkerAck, error)
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
	GetIntermediateData(context.Context, *InterMediateDataRequest) (*InterMediateDataResponse, error)
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) AssignMap(context.Context, *MapTask) (*WorkerAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMap not implemented")
}
func (UnimplementedWorkerServer) AssignReduce(context.Context, *ReduceTask) (*WorkerAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignReduce not implemented")
}
func (UnimplementedWorkerServer) HealthCheck(context.Context, *HealthcheckRequest) (*WorkerAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWorkerServer) GetStatus(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWorkerServer) GetIntermediateData(context.Context, *InterMediateDataRequest) (*InterMediateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntermediateData not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_AssignMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).AssignMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_AssignMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).AssignMap(ctx, req.(*MapTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_AssignReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).AssignReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_AssignReduce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).AssignReduce(ctx, req.(*ReduceTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).HealthCheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetIntermediateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterMediateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetIntermediateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_GetIntermediateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetIntermediateData(ctx, req.(*InterMediateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMap",
			Handler:    _Worker_AssignMap_Handler,
		},
		{
			MethodName: "AssignReduce",
			Handler:    _Worker_AssignReduce_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Worker_HealthCheck_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Worker_GetStatus_Handler,
		},
		{
			MethodName: "GetIntermediateData",
			Handler:    _Worker_GetIntermediateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/worker/worker.proto",
}
